#!/usr/bin/env bash

# This script performs a comparison test between the CO𝘕CEPT code's PP implementation
# and the GADGET-2 code's Tree implementation.

# Absolute path and name of the directory of this file
this_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
this_test="$(basename "$(dirname "${this_dir}")")"

# Set up error trapping
ctrl_c() {
    trap : 0
    exit 2
}
abort() {
    exit_code=$?
    colorprint "An error occurred during ${this_test} test!" "red"
    exit ${exit_code}
}
trap 'ctrl_c' SIGINT
trap 'abort' EXIT
set -e

# Generate initial conditions
"${concept}"                                        \
    -n 1                                            \
    -p "${this_dir}/param"                          \
    -c "output_dirs  = {'snapshot': '${this_dir}'}" \
    -c "output_bases = {'snapshot': 'ic'}"          \
    -c "output_times = {'snapshot': a_begin}"       \
    -c "
initial_conditions = {
    'name'   : 'GADGET halo',
    'species': 'matter',
    'N'      : 8**3,
}
"                                                   \
    -c "enable_class_background = True"
mv "${this_dir}/ic_"* "${this_dir}/ic"


# Remove Ewald grid on disk, if it exists
ewald_filename="$(get_param "ewald.filename" "import ewald")"
rm -f "${ewald_filename}"

# Run the CO𝘕CEPT code on the generated initial conditions
"${concept}" -n 1 -p "${this_dir}/param"

# Run the GADGET-2 code on the generated initial conditions
Gadget2_local_dir="${this_dir}/Gadget2"
mkdir -p "${Gadget2_local_dir}"
cp "${Gadget2_dir}/"* "${Gadget2_local_dir}" 2>/dev/null || :
"${concept}" -u gadget "${Gadget2_local_dir}" -p "${this_dir}/param"
replace_gadget_param() {
    name="$1"
    value="$2"
    sed -i "s/${name} /${name} ${value} %/" "${Gadget2_local_dir}/param"
}
replace_gadget_param "ErrTolTheta"               "1e-6"
replace_gadget_param "ErrTolForceAcc"            "1e-6"
replace_gadget_param "TreeDomainUpdateFrequency" "0"
(                                        \
    cd "${Gadget2_local_dir}"            \
    && make clean                        \
    && make                              \
    && "${mpiexec}" -n 1 ./Gadget2 param \
)

# Analyse the output snapshots
"${concept}"                    \
    -n 1                        \
    -p "${this_dir}/param"      \
    -m "${this_dir}/analyze.py" \
    --pure-python

# Test ran successfully. Deactivate traps.
trap : 0

