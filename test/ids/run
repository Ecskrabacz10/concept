#!/usr/bin/env bash

# This script tests the particle ID implementation of COùòïCEPT,
# including in-memory rearrangement and saving/loading of snapshots.

# Absolute path and name of the directory of this file
this_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
this_test="$(basename "$(dirname "${this_dir}")")"

# Set up error trapping
ctrl_c() {
    trap : 0
    exit 2
}
abort() {
    exit_code=$?
    colorprint "An error occurred during ${this_test} test!" "red"
    exit ${exit_code}
}
trap 'ctrl_c' SIGINT
trap 'abort' EXIT
set -e



#######################
# Realization subtest #
#######################
# This subtest realizes two particle components with IDs.
# The ID assignment should be independent on the number of processes
# and whether we run in compiled or pure Python mode.
mv_snapshot() {
    directory="$1"
    fname="$2"
    if [ -z "${fname}" ]; then
        fname="snap"
    fi
    mkdir -p "${directory}"
    f="${this_dir}/output/$(cd ${this_dir}/output && echo *)"
    suffix=""
    if [[ "${f}" == *".hdf5" ]]; then
        suffix=".hdf5"
    fi
    fname="${directory}/${fname}${suffix}"
    mv "${f}" "${fname}"
    echo "${fname}"
}
get_pure_python_dirname() {
    pure_python="$1"
    if [ "${pure_python}" == "True" ]; then
        pure_python_dirname="purepython"
    else
        pure_python_dirname="compiled"
    fi
    echo "${pure_python_dirname}"
}
subtest_dir="${this_dir}/realize"
nprocs_list=(1 2 3 4)
for pure_python in True False; do
    pure_python_dirname="$(get_pure_python_dirname "${pure_python}")"
    for n in ${nprocs_list[@]}; do
        "${concept}"                                       \
            -n ${n}                                        \
            -p "${this_dir}/param"                         \
            -c "_species = ['baryon', 'cold dark matter']" \
            -c "output_times = {'snapshot': a_begin}"      \
            -c "snapshot_type = 'concept'"                 \
            -c "select_particle_id = True"                 \
            --pure-python=${pure_python}
        fname="$(mv_snapshot "${subtest_dir}/${pure_python_dirname}/nprocs${n}")"
    done
done



####################
# Snapshot subtest #
####################
# This subtest saves the same particle realization to:
# - A COùòïCEPT snapshot.
# - A GADGET snapshot of type 1 using 32-bit IDs.
# - A GADGET snapshot of type 1 using 64-bit IDs.
# - A GADGET snapshot of type 2 using 32-bit IDs.
# - A GADGET snapshot of type 2 using 64-bit IDs.
# using different nprocs and compiled / pure Python mode.
# All snapshots are then loaded in compiled mode using a fixed
# number of processes and saved again. All snapshots should hold
# equivalent data.
subtest_dir="${this_dir}/snapshot"
nprocs_list=(1 4)
snap_list=("concept" "gadget-1-32" "gadget-1-64" "gadget-2-32" "gadget-2-64")
for pure_python in True False; do
    pure_python_dirname="$(get_pure_python_dirname "${pure_python}")"
    for n in ${nprocs_list[@]}; do
        for snap in ${snap_list[@]}; do
            snapformat=2
            bit=32
            if [[ "${snap}" == *"-1-"* ]]; then
                snapformat=1
            elif [[ "${snap}" == *"-2-"* ]]; then
                snapformat=2
            fi
            if [[ "${snap}" == *"-32" ]]; then
                bit=32
            elif [[ "${snap}" == *"-64" ]]; then
                bit=64
            fi
            "${concept}"                                                  \
                -n ${n}                                                   \
                -p "${this_dir}/param"                                    \
                -c "output_times = {'snapshot': a_begin}"                 \
                -c "snapshot_type = '${snap%%-*}'"                        \
                -c "gadget_snapshot_params['snapformat'] = ${snapformat}" \
                -c "gadget_snapshot_params['dataformat']['ID'] = ${bit}"  \
                -c "select_particle_id = True"                            \
                --pure-python=${pure_python}
            fname="$(mv_snapshot "${subtest_dir}/${pure_python_dirname}/nprocs${n}/${snap}" "A")"
            "${concept}"                                  \
                -n 5                                      \
                -p "${this_dir}/param"                    \
                -c "initial_conditions = '${fname}'"      \
                -c "output_times = {'snapshot': a_begin}" \
                -c "snapshot_type = 'concept'"            \
                -c "select_particle_id = True"
            fname="$(mv_snapshot "${subtest_dir}/${pure_python_dirname}/nprocs${n}/${snap}" "B")"
        done
    done
done



###################
# Made-up subtest #
###################
# This subtest checks whether the made-up IDs are the same regardless
# of pure Python mode and nprocs, when loading a component from a COùòïCEPT
# snapshot without IDs.
# It also saves a component without IDs to a GADGET snapshot. Here this should
# also be independent on pure Python mode, but not nprocs.
subtest_dir="${this_dir}/madeup"
nprocs_list=(1 4)
# Save GADGET snapshots
for pure_python in True False; do
    pure_python_dirname="$(get_pure_python_dirname "${pure_python}")"
    for n in ${nprocs_list[@]}; do
        "${concept}"                                  \
            -n ${n}                                   \
            -p "${this_dir}/param"                    \
            -c "output_times = {'snapshot': a_begin}" \
            -c "snapshot_type = 'gadget'"             \
            -c "select_particle_id = False"           \
            --pure-python=${pure_python}
        fname="$(mv_snapshot "${subtest_dir}/${pure_python_dirname}/nprocs${n}/gadget")"
    done
done
# Convert one of the GADGET snapshots to COùòïCEPT format without IDs
snap="${fname}"
"${concept}"                        \
    -u convert                      \
    "${fname}"                      \
    -p "${this_dir}/param"          \
    -c "snapshot_type = 'concept'"  \
    -c "select_particle_id = False"
snap_dirname="$(dirname "${snap}")"
snap="${snap_dirname}/$(cd "${snap_dirname}" && echo snap*.hdf5)"
# Load the COùòïCEPT snapshot and store with made-up IDs
for pure_python in True False; do
    pure_python_dirname="$(get_pure_python_dirname "${pure_python}")"
    for n in ${nprocs_list[@]}; do
        "${concept}"                                  \
            -n ${n}                                   \
            -p "${this_dir}/param"                    \
            -c "initial_conditions = '${snap}'"       \
            -c "output_times = {'snapshot': a_begin}" \
            -c "snapshot_type = 'concept'"            \
            -c "select_particle_id = True"            \
            --pure-python=${pure_python}
        fname="$(mv_snapshot "${subtest_dir}/${pure_python_dirname}/nprocs${n}/concept")"
    done
done
snap="${fname}"



#####################
# Evolution subtest #
#####################
# This subtest performs the same simulation with different nprocs and in
# compiled and pure Python mode. Despite particle exchanges between processes
# and in-memory reordering, all particles should have (very nearly) identical
# position and momenta in the end, when using the IDs as identifications.
subtest_dir="${this_dir}/evolution"
nprocs_list=(1 4)
for pure_python in True False; do
    pure_python_dirname="$(get_pure_python_dirname "${pure_python}")"
    for n in ${nprocs_list[@]}; do
        "${concept}"                            \
            -n ${n}                             \
            -p "${this_dir}/param"              \
            -c "initial_conditions = '${snap}'" \
            -c "output_times = {'snapshot': 1}" \
            -c "snapshot_type = 'concept'"      \
            -c "select_particle_id = True"      \
            --pure-python=${pure_python}
        fname="$(mv_snapshot "${subtest_dir}/${pure_python_dirname}/nprocs${n}")"
    done
done



# Analyse the outputs
"${concept}"                    \
    -n 1                        \
    -p "${this_dir}/param"      \
    -m "${this_dir}/analyze.py" \
    --pure-python

# Test ran successfully. Deactivate traps.
trap : 0

