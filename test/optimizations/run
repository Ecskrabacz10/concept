#!/usr/bin/env bash

# This script performs a test to see whether the many compiler
# optimizations (from pyxpp.py and the C compiler) introduce
# bugs in the code. A complex simulation is run with all and
# with no optimizations.

# Absolute path and name of the directory of this file
this_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
this_test="$(basename "$(dirname "${this_dir}")")"

# Set up error trapping
ctrl_c() {
    trap : 0
    exit 2
}
abort() {
    exit_code=$?
    colorprint "An error occurred during ${this_test} test!" "red"
    exit ${exit_code}
}
trap 'ctrl_c' SIGINT
trap 'abort' EXIT
set -e

# Run the COùòïCEPT code with optimizations
if [ -d "${build_dir}" ] && [ -n "$(ls -A "${build_dir}")" ]; then
    # Reuse build in standard build location,
    # assuming this uses the default optimizations.
    # Note that the copy preserves timestamps.
    mkdir "${this_dir}/build_optimized"
    cp -p "${build_dir}/"* "${this_dir}/build_optimized/"
fi
"${concept}"                         \
    -b "${this_dir}/build_optimized" \
    -n 4                             \
    -p "${this_dir}/param"           \
    --local                          \

mv "${this_dir}/output" "${this_dir}/output_optimized"

# Run the COùòïCEPT code without optimizations
"${concept}"                           \
    -b "${this_dir}/build_unoptimized" \
    -n 4                               \
    -p "${this_dir}/param"             \
    --no-optimizations                 \
    --local                            \

mv "${this_dir}/output" "${this_dir}/output_unoptimized"

# Analyse the output power spectra and 2D renders
"${concept}"                    \
    -n 1                        \
    -p "${this_dir}/param"      \
    -m "${this_dir}/analyze.py" \
    --pure-python               \
    --local                     \

# Test ran successfully. Deactivate traps.
trap : 0
