#!/usr/bin/env bash

# This script runs the same, random initial conditions in both compiled
# and pure Python mode and compares the results. The P¬≥M algorithm is used.

# Number of processes to use
nprocs_list=(1 2 4)

# Absolute path and name of the directory of this file
this_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
this_test="$(basename "$(dirname "${this_dir}")")"

# Set up error trapping
ctrl_c() {
    trap : 0
    exit 2
}
abort() {
    exit_code=$?
    colorprint "An error occurred during ${this_test} test!" "red"
    exit ${exit_code}
}
trap 'ctrl_c' SIGINT
trap 'abort' EXIT
set -e

# Generate initial conditions
"${concept}"                                        \
    -n 1                                            \
    -p "${this_dir}/param"                          \
    -c "output_dirs  = {'snapshot': '${this_dir}'}" \
    -c "output_bases = {'snapshot': 'ic'}"          \
    -c "output_times = {'snapshot': a_begin}"       \
    -c "
initial_conditions = {
    'species': 'matter',
    'N'      : 4**3,
}
"
mv "${this_dir}/ic_"* "${this_dir}/ic.hdf5"

# Run the COùòïCEPT code on the generated initial conditions
for n in ${nprocs_list[@]}; do
    "${concept}"              \
        -n ${n}               \
       -p "${this_dir}/param"
    mv "${this_dir}/output" "${this_dir}/output_cython_${n}"
done
# Run the COùòïCEPT code in pure Python mode on the generated initial conditions
for n in ${nprocs_list[@]}; do
    "${concept}"               \
        -n ${n}                \
        -p "${this_dir}/param" \
        --pure-python
    mv "${this_dir}/output" "${this_dir}/output_python_${n}"
done

# Analyse the output snapshots
"${concept}"                    \
    -n 1                        \
    -p "${this_dir}/param"      \
    -m "${this_dir}/analyze.py" \
    --pure-python

# Test ran successfully. Deactivate traps.
trap : 0
