#!/usr/bin/env bash

# This script runs a test of the render3D utility,
# as well as the render2D functionality.
# It generates a random snapshot and 3D renders first using 1 CPU and giving
# the render3D script the exact path to the snapshot (with and without
# specifying a render3D parameter file). Two copies of this snapshot is then
# placed in a separate directory. Using 2 CPUs, the render3D script is then
# given the path to this directory, which should produce a 3D render for each
# snapshot. Different 3D render parameters are used for the two calls to the
# render3D utility script.

# Absolute path and name of the directory of this file
this_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
this_test="$(basename "$(dirname "${this_dir}")")"

# Set up error trapping
ctrl_c() {
    trap : 0
    exit 2
}
abort() {
    exit_code=$?
    colorprint "An error occurred during ${this_test} test!" "red"
    exit ${exit_code}
}
trap 'ctrl_c' SIGINT
trap 'abort' EXIT
set -e

# Generate initial conditions
"${concept}"                                               \
    -n 1                                                   \
    -p "${this_dir}/param"                                 \
    -c "output_dirs  = {'snapshot': '${this_dir}/output'}" \
    -c "output_bases = {'snapshot': 'snapshot'}"           \
    -c "output_times = {'snapshot': a_begin}"              \
    -c "
initial_conditions = {
    'species': 'matter',
    'N'      : _size**3,
}
"
mv "${this_dir}/output/snapshot"* "${this_dir}/output/snapshot.hdf5"

# Make copies of the snapshot
mkdir -p "${this_dir}/output/subdir"
cp "${this_dir}/output/snapshot.hdf5" "${this_dir}/output/subdir/snapshot_0.hdf5"
cp "${this_dir}/output/snapshot.hdf5" "${this_dir}/output/subdir/snapshot_1.hdf5"

# Generate two different 3D render parameter files
echo "
output_bases = {'render3D': 'render3D'}
render3D_select = {'all': {'image': True}}
render3D_options = {
    'color'     : {'matter': (1, 0.2, 0.3)},
    'background': {'all': '0'},
    'fontsize'  : {'all': '0.05*resolution'},
    'resolution': {'all': 234},
}
" > "${this_dir}/render3D.param_0"
echo "
output_bases = {'render3D': ''}
render3D_select = {'all': {'image': True}}
render3D_options = {
    'color'     : {'matter': 'summer'},
    'background': {'all': 'lightyellow'},
    'fontsize'  : {'all': '0.05*resolution'},
    'resolution': {'all': 1080},
}
" > "${this_dir}/render3D.param_1"

# 3D render the single snapshot without explicitly specifying a 3D render parameter file
"${concept}" -n 1 -u render3D "${this_dir}/output/snapshot.hdf5"
mv                                                     \
    "${this_dir}/output/render3D_snapshot.png"         \
    "${this_dir}/output/render3D_snapshot_default.png"

# 3D render the single snapshot by specifying a 3D render parameter file
"${concept}"                               \
    -n 1                                   \
    -p "${this_dir}/render3D.param_0"      \
    -u render3D                            \
        "${this_dir}/output/snapshot.hdf5"

# 3D render all (both) snapshots in the subdir, using 2 processes
"${concept}"                          \
    -n 2                              \
    -p "${this_dir}/render3D.param_1" \
    -u render3D                       \
        "${this_dir}/output/subdir"

# Analyse the output snapshots
"${concept}"                    \
    -n 1                        \
    -p "${this_dir}/param"      \
    -m "${this_dir}/analyze.py" \
    --pure-python

# For the spectacularity of it, run a small simulation
# demonstrating 2D terminal rendering.
"${concept}"               \
    -n 1                   \
    -p "${this_dir}/param"

# Also demonstrate the play utility
"${concept}"                 \
    -u play                  \
        --fps 10             \
        --component "matter" \
        --repeats 3

# Test ran successfully. Deactivate traps.
trap : 0
